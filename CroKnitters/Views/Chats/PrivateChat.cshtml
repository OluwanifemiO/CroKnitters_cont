@model IEnumerable<MessageViewModel>
@{
    ViewData["Title"] = "Private Chat";
}

<div class="container mx-auto">

    <a asp-controller="Chats" asp-action="Index" class="w-auto justify-center rounded-md bg-indigo-600 m-3 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 mt-2">Back to Private Chats</a>
    
    <!--container for the chats list section and messages section-->
    <div class="flex">



        <!--messages-->
        <div class="flex-1 rounded-lg border text-center w-auto h-auto shadow-xl m-5 justify-content-start bg-white messages">
            @if (TempData["error"] != null)
            {
                <p class="text-danger">
                    @TempData["error"]
                </p>
            }

            <div class="chat-container">
                <!--messages themselves-->

                <div class="message-container">
                    <!--loop through the messages and arrange them accordingly-->
                    @foreach (var msg in Model)
                    {
                        @if (msg != null)
                        {
                            <!--if the current user is the sender, align their messages to the right-->
                            @if (msg.SenderId == @Context.Request.Cookies["userId"])
                            {
                                <!--Sender side-->
                                <div class="text-white message sender-message">
                                    <p class="text-2xl"> @msg.Content </p>
                                    <p>@msg.senderInfo.FirstName @msg.senderInfo.LastName @msg.SentTime</p>
                                </div>
                            }
                            else
                            {
                                <!--Receiver side-->
                                <div class="text-white message receiver-message">
                                    <p class="text-2xl"> @msg.Content </p>
                                    <p>@msg.receiverInfo.FirstName @msg.receiverInfo.LastName @msg.SentTime</p>
                                </div>
                            }

                            ViewBag.receiverId = msg.ReceiverId;
                        }
                    }
                </div>

                <!--Text box and send button-->
                <div class="input-group text-center m-3">
                    <!--once the user presses send, save the message to the db ththrough the controller-->
                    <form asp-controller="Chats" onsubmit="sendMessage(event)" method="post">

                        <input type="hidden" name="senderId" id="senderId" value="@Context.Request.Cookies["userId"]">
                        <input type="hidden" name="receiverId" id="receiverId" value="@ViewBag.receiverId">
                        <input type="text" class="form-control rounded-pill w-full" name="message-input" id="message-input" placeholder="Send a message...">

                        <div class="col-sm-2 input-group-append">
                            <button class="btn btn-primary rounded-pill bg-primary" id="send" type="submit">Send</button>
                        </div>

                    </form>
                </div>

            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/js/signalr.min.js"></script>
    <script src="https://www.unpkg.com/axios@1.6.8/dist/axios.min.js"></script>

    <script>

        var connection = new signalR.HubConnectionBuilder().withUrl("/privateChatHub").build();

        //Disable the send button until connection is established.
        document.getElementById("send").disabled = true;

        //this will show the message sent by the other user on the page
        connection.on("RecieveMessage", function (formData) {
            var msg = document.createElement("div")

            var userId = document.getElementById("senderId").value;

            if (formData.senderId === userId) {
                msg.classList.add('sent', 'bg-primary', 'text-white', 'mb-3', 'message'); // Apply CSS class for sent messages
            } else {
                msg.classList.add('received', 'bg-secondary', 'text-white', 'mb-3', 'message'); // Apply CSS class for received messages
            }
            console.log(formData)
            var p = document.createElement("p");
            p.className = 'text-2xl';
            p.appendChild(document.createTextNode(formData.content));

            var p2 = document.createElement("p");
            p2.appendChild(document.createTextNode(formData.creationDate));

            msg.appendChild(p);
            msg.appendChild(p2);

            document.querySelector('.messageList').append(msg);
        })



        //start the connection and get the connection id
        connection.start().then(function () {

            console.log("Connection started");
            document.getElementById("send").disabled = false;

        }).catch(function (err) {
            return console.log(err.toString())
        })

        var sendMessage = function (event) {
            event.preventDefault();

            var formData = new FormData();
            formData.append('senderId', document.getElementById("senderId").value);
            formData.append('message', document.getElementById("message-input").value);
            formData.append('receiverId', document.getElementById("receiverId").value);

            document.getElementById("message-input").value = '';

            axios.post('/Chats/SendMessage', formData)
                .then(res => {
                    console.log("Message sent!")
                })
                .catch(err => {
                    console.log("Failed to send message!")
                })
        }

                                // document.getElementById("send").addEventListener("click", function (event) {
                                //     var senderId = document.getElementById("senderId").value;
                                //     var message = document.getElementById("message-input").value;

                                //     console.log("Sender ID:", senderId);
                                //     console.log("Message:", message);

                                //     connection.invoke("SendMessage", senderId, message).catch(function (err) {
                                //         return console.error(err.toString());
                                //     });
                                //     event.preventDefault();
                                // });


    </script>
}



